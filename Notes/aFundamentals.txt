Packages
================================================================
    Packages are Go's way of organizing code
    Programs are written as one or more Packages
        Packages can be imported from the Go package registry
    Packages should be focused and perform a single thing
        Argument parsing
        Drawing graphics
        Handling HTTP requests

ex:
    import "name"

    import (
        "name"
        "namespace/packageName"
    )


Modules
===============================================================
Modules are a collection of Packages
Created by having a go.mod file in the root directory of your project
    Can be managed by the Go CLI 
Contains information about your project
    Dependencies, Go version, package info 
All Go projects have a go.mod file


ex:
moodule example.com/practice

go 1.27

require (
    github.com/luke/somelinkhere v1.4.2
    github.com/luke/somelinkhere v1.13.0
)

namespace is the 'github.com/luke'
packageName is 'somelinkehere'

It is customary to include the link in the namespace so people can easily find the code



Data Types
==============================================================
All data in programs consists of binary numbers 
A data type is a way that the program can interpret the binary numbers
Numbers, letters, and words are all different types:
    15
    y
    Hello

Go is a statically typed language
    Data types must be provided by the programmer
Go uses type interface to determine wht type of data it is working with
    Data types only need to be provided in specific circumstances
    Can always specify the type if desired
        Compiler error if wrong type is used



Primitive Data Types
=============================================================
All primitive data types in go are numeric
Type indicated in code is a convention
    It's possible that the data is invalid for the given type
        Only applies when working with user input or manually manipulating the binary data


Basic Types: https://golangbyexample.com/all-data-types-in-golang-with-examples/




Type Aliases
=============================================================
Possible to create type Aliases
Same in every way to another type, just a different name
Useful for providing indication what kind of data is being utilized

ex:
type UserId int 
type Direction byte
type Speed float64
type Velocity Speed

Aliases is primarily used to make it easier to read the code
In the ex, Speed is assigned a number while Velocity is better name for speed.
    That way, we know exactly what the type is



Type Conversions
==============================================================
Converting between types can be done with parantheses

ex:
type UserId int
type Speed float64

UserId(5)
Speed(88.3)




Text Encoding
==============================================================
Textual data in Go uses UTF-8 Encoding
Encoding is a way to represent thousands of different symbols using code pages 
Code pages are tables which use the first few bytes of data to determine which page to use
    Each symbol in the code page is called a code point

When working with strings and runes, we're working with bytes not letters themselves
Important to understand that letters can consume more than 1 byte




Runes 
=============================================================
Text is represented using the rune type
    Similar to char in many other programming languages
Rune is an alias for int32 (32-bit integer)
    Always a number: will print numeric value unless proper formatting is specified
A rune can represent any symbol
    Letters, numbers, emoji, etc 



Strings
======================================================
A string is the data type for storing multiple runes
Strings are just an array of bytes and a string length
    There is no null termination with a Go string
When iterating a string, iteration occurs over bytes
    Bytes are not symbols
    Special iteration required to retrieve runes/symbols



Rune & String Creation
======================================================
Runes: 'a' 'R' '7' '\n' `☇` `☉` `☑`
Strings: "Amount is $22\n"
         "k"
Raw Literal: `Let's code in "Golang!" `

Back ticks (`) are only needed is when you need to use a symbol that is NOT on your keyboard
CAN use back ticks if need
Escape symbols start with (\) \n will create a new line

Runes: ' or `
Strings: " "
Raw Literal: ` `



Go CLI Tool 
======================================================
Go toolchain provides the go command line utility
This tool is used to:
    Update dependencies 
    Build & test projects
    Manage artifacts
    Format source code


Everyday Go commands
======================================================
build: builds the projects & emits an executable binary
    build -race: checks for concurrency problems
run: runs the projects directly; no output executable
mod: manages modules & dependencies
    mod tidy: updates dependencies
test: runs the project's test suite
fmt: formats all source files (usually automated with IDE)



